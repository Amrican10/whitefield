[P1]
- Whitefield manager
- NS3 based phy/mac
- Basic graphviz based static visualization
- Contiki based Stackline with TAP and SHIM.

[P2]
- NS3 ext addressing mode
- IdealAir phy/mac
- Advanced runtime visualization
- RiOT based Stackline with TAP and SHIM

[P3]
- NS3 RDC
- Castalia phy/mac ... allowing advanced MAC implementations available on castalia to be used.
- Extending to other RFs such as WBAN, WiFi adhoc etc 

Possibilities:
1. Test different implementations which could be compiled on native linux platform ... For e.g. if CoAP implementation between Contiki and RiOT has to be tested then, you can attach Contiki and RiOT nodes compiled on linux platform utilizing TAP interface and on the Airline using IdealAir ... 
2. Allows loose coupling between PHY/MAC and above layers. A practical use-case would be to test RPL implementation from Contiki on adhoc Wifi.
3. Problems with Cooja:
  a. Unrealistic RF ... for e.g. transient links, transient asymmetic links, inteference model, nodes with uneven tx power levels etc could not be simulated in Cooja.
  b. Scalability issues with JVM based Cooja ... I found node count above 100 have severe issues and the machine drains up on resources.
  c. Does not support advanced mobilility models as supported in NS3/Omnet.
  
The fundamental premise to work upon Whitefield is that NS3/Castalia simulation env is proven for realistic RF propagation/error/path loss models. But at the same time NS3/Castalia does not have a IP layer stack which is used in real worlds. Contiki/RiOT OS are developed and continuosly validated/upgraded for their IP above layer protocols behaviour. But for them to be tested one needs to deploy them in actual hardware nodes. Other option is to port them to NS3/Castalia code base which is a tedious and error-prone process. Other point is that the developers are well-versed in developing middleware stacks across such popular OSes, and once their code is developed they would ideally want to test it in realistic RF envs. Whitefield aim is to simply merge them in a way so that realistic RF models from NS3/Castalia can be reused with the well-proven middleware stacks provided by popular IoT OSes.
The work originated from my experience where i devised an improved mechanism for routing protocol (RPL) for popular Contiki and tested it on Cooja where it worked like a charm, only to later find out the practical issues faced by the protocols with realistic RF envs which resulted in serious rework and revamping the test strategy.
